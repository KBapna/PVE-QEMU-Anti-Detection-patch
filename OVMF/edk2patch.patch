diff -Naur a/edk2patch.sh b/edk2patch.sh
--- a/edk2patch.sh      2025-10-18 05:18:49.704774612 +0530
+++ b/edk2patch.sh      2025-10-18 05:20:17.694569688 +0530
@@ -323,103 +323,3 @@
 get_new_string $(shuf -i 5-7 -n 1) 3
 echo "\"VMMBootOrder%04x\"                                -> \"${prefix}${suffix}%04x\""
 sed -i "$file_QemuBootOrderLib" -Ee "s/\"VMMBootOrder%04x\"/\"${prefix}${suffix}%04x\"/"
-
-read -p $'Continue? [y/\e[1mN\e[0m]> ' -n 1 -r
-if [[ $REPLY =~ ^[Yy]$ ]]; then
-  echo ""
-else
-  echo ""
-  exit 0
-fi
-
-cd edk2
-export WORKSPACE="$(pwd)"
-export EDK_TOOLS_PATH="${WORKSPACE}/BaseTools"
-export CONF_PATH="${WORKSPACE}/Conf"
-
-build_firmware() {
-  echo "Building BaseTools (EDK II build tools)..."
-  make -C BaseTools; source edksetup.sh
-  echo "Compiling OVMF with Secure Boot and TPM support..."
-  build \
-    -a X64 \
-    -p OvmfPkg/OvmfPkgX64.dsc \
-    -b RELEASE \
-    -t GCC5 \
-    -n 0 \
-    -s \
-    -q \
-    --define SECURE_BOOT_ENABLE=TRUE \
-    --define TPM_CONFIG_ENABLE=TRUE \
-    --define TPM_ENABLE=TRUE \
-    --define TPM1_ENABLE=TRUE \
-    --define TPM2_ENABLE=TRUE
-}
-
-if [[ -f "$VARS_DEST" ]]; then
-  echo -e "${EDK2_DEST}/\e[1m${VARS_FILE}\e[0m found."
-  read -p $'Rebuild? [y/\e[1mN\e[0m]> ' -n 1 -r
-  if [[ $REPLY =~ ^[Yy]$ ]]; then
-    echo ""
-    build_firmware
-  else
-    echo ""
-  fi
-else
-  build_firmware
-fi
-
-sudo mkdir -p "$EDK2_DEST"
-qemu-img convert -f raw -O qcow2 Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd $CODE_DEST
-qemu-img convert -f raw -O qcow2 Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd $VARS_DEST
-echo "$CODE_DEST"
-echo "$VARS_DEST"
-
-read -p $'Clear EFI variables? [Y/\e[1mn\e[0m]> ' -n 1 -r
-if [[ $REPLY =~ ^[Nn]$ ]]; then
-  echo ""
-else
-  echo ""
-  cp -f "$VARS_DEST" "$VARS_DEST_2"
-  echo "$VARS_DEST_2"
-  exit 0
-fi
-
-
-readonly URL="https://raw.githubusercontent.com/microsoft/secureboot_objects/main/PreSignedObjects"
-readonly UUID="77fa9abd-0359-4d32-bd60-28f4e78f784b"
-
-cd "$SCRIPT_DIR"
-WORK_DIR="$(pwd)/work"
-mkdir -p "$WORK_DIR"
-cp -f "redhat.json" "$WORK_DIR/redhat.json"
-cd "$WORK_DIR"
-
-declare -A CERTS=(
-  ["ms_pk_oem.der"]="$URL/PK/Certificate/WindowsOEMDevicesPK.der"
-  ["ms_kek_mscorp_2011.der"]="$URL/KEK/Certificates/MicCorKEKCA2011_2011-06-24.der"
-  ["ms_kek_mscorp_2023.der"]="$URL/KEK/Certificates/microsoft%20corporation%20kek%202k%20ca%202023.der"
-  ["ms_db_mscorp_2011.der"]="$URL/DB/Certificates/MicCorUEFCA2011_2011-06-27.der"
-  ["ms_db_windows_2011.der"]="$URL/DB/Certificates/MicWinProPCA2011_2011-10-19.der"
-  ["ms_db_mscorp_2023.der"]="$URL/DB/Certificates/microsoft%20uefi%20ca%202023.der"
-  ["ms_db_windows_2023.der"]="$URL/DB/Certificates/windows%20uefi%20ca%202023.der"
-  ["ms_db_optionrom_2023.der"]="$URL/DB/Certificates/microsoft%20option%20rom%20uefi%20ca%202023.der"
-  ["dbxupdate_x64.bin"]="https://uefi.org/sites/default/files/resources/dbxupdate_x64.bin"
-)
-
-for file in "${!CERTS[@]}"; do
-  wget -q -O "$file" "${CERTS[$file]}"
-done
-
-#  --secure-boot \
-virt-fw-vars --input "$VARS_DEST" --output "$VARS_DEST_2" \
-  --set-pk "$UUID" ms_pk_oem.der \
-  --add-kek "$UUID" ms_kek_mscorp_2011.der \
-  --add-kek "$UUID" ms_kek_mscorp_2023.der \
-  --add-db "$UUID" ms_db_mscorp_2011.der \
-  --add-db "$UUID" ms_db_windows_2011.der \
-  --add-db "$UUID" ms_db_mscorp_2023.der \
-  --add-db "$UUID" ms_db_windows_2023.der \
-  --add-db "$UUID" ms_db_optionrom_2023.der \
-  --set-dbx dbxupdate_x64.bin \
-  --set-json redhat.json
